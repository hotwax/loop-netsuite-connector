<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="call" noun="NetSuiteRestletAPI"  type="netsuite-rest-connector" location="${restletEndPoint}" method="post">
        <description>Call NetSuite Restlet API to process payload in NetSuite</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="payload" type="Map" required="true"/>
            <parameter name="restletEndPoint"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap" type="Map"/>
        </out-parameters>
    </service>

    <service verb="verify" noun="NetSuiteAcessToken">
        <description>Verify and store access token from NetSuite</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="organizationPartyId"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote"/>
            <if condition="systemMessageRemote == null"><return error="true" message="Could not find SystemMessageRemote with ID ${systemMessageRemote.systemMessageRemoteId}"/></if>
            <script><![CDATA[
                try {
                    token = co.hotwax.netsuite.util.NetSuiteUtil.generateAcessToken(ec.ecfi, systemMessageRemoteId);
                } catch (Exception e) {
                    ec.logger.error("Error in API call Error: ${e.getMessage()}")
                }
            ]]></script>
            <if condition="token == null">
                <return error="true" message="Unable to generate access token for system message remote : ${systemMessageRemoteId}"/>
                <else>
                    <if condition="!organizationPartyId">
                        <!-- Get OrganizationPartyId from logged in user -->
                        <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                        <set field="organizationPartyId" from="context.partyId" type="String"/>
                    </if>

                    <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                        <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                        <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessageRemoteId"/>
                        <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                        <date-filter/>
                    </entity-find>

                    <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                        <service-call name="update#PartySystemMessageRemote"
                                      in-map="[
                            partyId:partyNetSystemMessageRemote.partyId,
                            systemMessageRemoteId:partyNetSystemMessageRemote.systemMessageRemoteId,
                            remoteIdType:partyNetSystemMessageRemote.remoteIdType,
                            fromDate:partyNetSystemMessageRemote.fromDate,
                            verified:'Y',
                            systemMessageTypeId:partyNetSystemMessageRemote.systemMessageTypeId
                          ]"/>
                    </iterate>
                    <return type="success" message="NetSuite credentials verified for system message remote ${systemMessageRemoteId}"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="send" noun="SystemMessageFileNetSuite">
        <description>Send system message file to NetSuite</description>
        <implements service="org.moqui.impl.SystemMessageServices.send#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <if condition="systemMessage == null"><return error="true" message="Could not find SystemMessage with ID ${systemMessageId}"/></if>

            <set field="systemMessageType" from="systemMessage.'moqui.service.message.SystemMessageType'"/>
            <if condition="systemMessageType == null"><return error="true" message="System message ${systemMessageId} has no SystemMessageType, not sending."/></if>
            <set field="systemMessageRemote" from="systemMessage.'moqui.service.message.SystemMessageRemote'"/>
            <if condition="systemMessageRemote == null"><return error="true" message="System message ${systemMessageId} has no SystemMessageRemote, not sending."/></if>
            <if condition="!systemMessageRemote.sendUrl"><return error="true" message="No sendUrl on SystemMessageRemote ${systemMessageRemote.systemMessageRemoteId}, not sending."/></if>

            <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="systemMessageTypeParameter" cache="true">
                <field-map field-name="systemMessageTypeId" from="systemMessageType.systemMessageTypeId"/>
                <field-map field-name="parameterName" value="scriptType"/>
            </entity-find-one>
            <if condition="systemMessageTypeParameter == null"><return error="true" message="No NetSuite Restlet script type found on SystemMessageType ${systemMessageType.systemMessageTypeId}."/></if>

            <entity-find-one entity-name="co.hotwax.netsuite.NetsuiteConfig" value-field="netsuiteConfig" cache="true">
                <field-map field-name="accountId" from="systemMessageRemote.remoteId"/>
                <field-map field-name="accountType" from="systemMessageRemote.remoteIdType"/>
                <field-map field-name="scriptType" from="systemMessageTypeParameter.parameterValue"/>
            </entity-find-one>
            <if condition="netsuiteConfig == null"><return error="true" message="No NetSuiteConfig found for SystemMessageRemote ${systemMessageRemote.systemMessageRemoteId}, not sending."/></if>

            <script><![CDATA[
                import groovy.json.JsonSlurper

                String filename = systemMessage.remoteMessageId ?: systemMessage.systemMessageId
                //get the file text from the file path stored in messageText
                fileText = ec.resource.getLocationReference(systemMessage.messageText).getText();
                payloadMap = (Map) new JsonSlurper().parseText(fileText)
            ]]></script>
            <set field="inMap" from="[:]"/>
            <set field="inMap.systemMessageRemoteId" from="systemMessageRemote.systemMessageRemoteId"/>
            <set field="inMap.payload" from="payloadMap"/>
            <set field="inMap.restletEndPoint" from="netsuiteConfig.scriptEndPoint"/>
            <service-call name="co.hotwax.netsuite.NetSuiteRestServices.call#NetSuiteRestletAPI"
                          in-map="inMap" out-map="result"/>
            <if condition="result.responseMap.status != 'success'">
                <return error="true" message="Error syncing NetSuite RMA : ${result.responseMap.message}"/>
            </if>
            <set field="remoteMessageId" from="filename"/>
        </actions>
    </service>

    <service verb="receive" noun="BundlePayload">
        <description>Receive NetSuite Bundle Payload information and store it in NetSuiteConfig entity</description>
        <actions>
            <set field="bundleMap" from="ec.web.getRequestParameters()"/>
            <set field="netSuiteLoopAPIList" from="bundleMap.netSuiteLoopAPIList" type="List"/>
            <iterate list="netSuiteLoopAPIList" entry="netSuiteLoopAPI">
                <service-call name="create#co.hotwax.netsuite.NetsuiteConfig"
                              in-map="[
                            accountId: bundleMap.companyId,
                            companyName: bundleMap.companyName,
                            accountType: bundleMap.companyAccountType,
                            scriptType: netSuiteLoopAPI.scriptType,
                            scriptName: netSuiteLoopAPI.scriptName,
                            scriptEndPoint: netSuiteLoopAPI.scriptURL,
                          ]"/>
            </iterate>
        </actions>
    </service>

    <service verb="send" noun="NetSuiteRMAMapping">
        <description>Send NetSuite RMA Mapping and store it in NetSuite Custom Entity.</description>
        <in-parameters>
            <parameter name="integrationMappingId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="co.hotwax.netsuite.IntegrationTypeMapping" value-field="integrationTypeMapping"/>
            <if condition="integrationTypeMapping == null"><return error="true" message="Could not find IntegrationTypeMapping with ID ${integrationMappingId}"/></if>

            <set field="payloadMap" from="[:]"/>
            <set field="mappingKey" from="integrationTypeMapping.mappingKey"/>
            <set field="mappingValue" from="integrationTypeMapping.mappingValue"/>
            <script>
                payloadMap.put(mappingKey, mappingValue)
            </script>

            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote">
                <field-map field-name="systemMessageRemoteId" from="integrationTypeMapping.systemMessageRemoteId"/>
            </entity-find-one>

            <entity-find-one entity-name="co.hotwax.netsuite.NetsuiteConfig" value-field="netsuiteConfig" cache="true">
                <field-map field-name="accountId" from="systemMessageRemote.remoteId"/>
                <field-map field-name="accountType" from="systemMessageRemote.remoteIdType"/>
                <field-map field-name="scriptType" value="netsuite.restlet.update.loopconfigrecord"/>
            </entity-find-one>
            <if condition="netsuiteConfig == null"><return error="true" message="No NetSuiteConfig found for SystemMessageRemote ${systemMessageRemote.systemMessageRemoteId}, not sending RMA Mapping."/></if>

            <set field="inMap" from="[:]"/>
            <set field="inMap.systemMessageRemoteId" from="systemMessageRemote.systemMessageRemoteId"/>
            <set field="inMap.payload" from="payloadMap"/>
            <set field="inMap.restletEndPoint" from="netsuiteConfig.scriptEndPoint"/>
            <service-call name="co.hotwax.netsuite.NetSuiteRestServices.call#NetSuiteRestletAPI"
                          in-map="inMap" out-map="result"/>
            <if condition="result.responseMap.status != 'success'">
                <return error="true" message="Error syncing NetSuite RMA Mapping: ${result.responseMap.message}"/>
            </if>

            <service-call name="update#co.hotwax.netsuite.IntegrationTypeMapping"
                          in-map="[
                            integrationMappingId:integrationMappingId,
                            synced:'Y'
                          ]"/>
            <return type="success" message="NetSuite RMA Mapping Synced."/>
        </actions>
    </service>

    <service verb="sendAll" noun="NetSuiteRMAMapping">
        <description>Send NetSuite RMA Mapping and store it in NetSuite Custom Entity.</description>
        <in-parameters>
            <parameter name="accountId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.netsuite.IntegrationTypeMapping" list="integrationTypeMappingList">
                <econdition field-name="systemMessageRemoteId" operator="equals" from="accountId"/>
                <econdition field-name="synced" operator="equals" value="N"/>
            </entity-find>
            <if condition="!integrationTypeMappingList"><return error="true" message="Could not find IntegrationTypeMapping for Netsuite Account ID ${accountId}"/></if>

            <iterate list="integrationTypeMappingList" entry="integrationTypeMapping">
                <service-call name="co.hotwax.netsuite.NetSuiteRestServices.send#NetSuiteRMAMapping"
                              in-map="[integrationMappingId:integrationTypeMapping.integrationMappingId]"/>
            </iterate>
        </actions>
    </service>

    <service verb="verify" noun="APIKey">
        <out-parameters>
            <parameter name="accountId"/>
        </out-parameters>
        <actions>
            <set field="userAccount" from="ec.user.UserAccount"/>
            <if condition="userAccount != null">
                <set field="accountId" from="userAccount.externalUserId"/>
            </if>
            <return type="success" message="NetSuite API Key is verified for account : ${accountId}"/>
        </actions>
    </service>
</services>