<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="create" noun="PartyProcessLoopReturnServiceJob">
        <description>
            This service will create a Process Loop Return Service Job for organization party.
        </description>
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partySystemMessageRemoteList" cache="true">
                <econdition field-name="partyId" operator="equals" from="partyId"/>
                <econdition field-name="systemMessageTypeId" operator="equals" from="'LoopSFTP'"/>
            </entity-find>

            <entity-find-one entity-name="co.hotwax.netsuite.party.Organization" value-field="organization" cache="true">
                <field-map field-name="partyId" from="partyId"/>
            </entity-find-one>
            <set field="organizationName" from="organization.organizationName"/>

            <if condition="partySystemMessageRemoteList">
                <set field="systemMessageRemoteId" from="partySystemMessageRemoteList[0].systemMessageRemoteId" type="String"/>
            </if>
            <set field="serviceContext" from="[:]"/>
            <set field="description" value="Service job to poll Process Loop Return Feed for organization {organizationName} [${partyId}]"/>
            <set field="serviceName" value="co.hotwax.loop.common.SystemMessageServices.poll#SystemMessageFileSftp"/>
            <set field="paused" value="N"/>
            <set field="cronExpression" value="0 0/15 * * * ?"/>
            <set field="transactionTimeout" value="3600"/>
            <set field="jobName" value="Poll_ProcessLoopReturnFeed_${partyId}"/>

            <set field="serviceContext.jobName" from="jobName"/>
            <set field="serviceContext.description" from="description"/>
            <set field="serviceContext.serviceName" from="serviceName"/>
            <set field="serviceContext.paused" from="paused"/>
            <set field="serviceContext.cronExpression" from="cronExpression"/>
            <set field="serviceContext.transactionTimeout" from="transactionTimeout"/>

            <service-call name="create#moqui.service.job.ServiceJob" in-map="serviceContext"/>

            <service-call name="create#moqui.service.job.ServiceJobParameter" in-map="[jobName: jobName, parameterName: 'systemMessageRemoteId', parameterValue: systemMessageRemoteId]"/>
            <service-call name="create#moqui.service.job.ServiceJobParameter" in-map="[jobName: jobName, parameterName: 'systemMessageTypeId', parameterValue: 'ProcessLoopReturn']"/>
            <service-call name="create#moqui.service.job.ServiceJobParameter" in-map="[jobName: jobName, parameterName: 'partyId', parameterValue: partyId]"/>

            <return message="Process Loop Return Job schedule has been created successfully."/>
        </actions>
    </service>

    <service verb="consume" noun="LoopReturnProcessedFeed" transaction-timeout="7200">
        <description>Service to consume the Loop Return Feed and call Process Loop Return API.</description>
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <!-- Fetch the systemMessage record for the incoming systemMessageId -->
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <set field="partyId" from="systemMessage.receiverId"/>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partySystemMessageRemoteList">
                <econdition field-name="partyId" operator="equals" from="partyId"/>
                <econdition field-name="systemMessageTypeId" operator="equals" from="'LoopWebhook'"/>
            </entity-find>
            <if condition="partySystemMessageRemoteList">
                <set field="systemMessageRemoteId" from="partySystemMessageRemoteList[0].systemMessageRemoteId" type="String"/>
            </if>

            <set field="fileText" from="ec.resource.getLocationReference(systemMessage.messageText).getText()"/>
            <set field="loopReturns" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(fileText, List.class)"/>

            <!-- Iterate through the loopReturns list -->
            <iterate list="loopReturns" entry="loopReturn">
                <set field="loopReturnId" from="loopReturn.loopReturnId"/>
                <log level="info" message="Processing Loop Return ${loopReturnId}"/>

                <set field="endPoint" value="/warehouse/return/${loopReturnId}/process"/>

                <service-call name="co.hotwax.loop.common.LoopHelperServices.send#LoopRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId,
                        requestType:'POST', contentType:'application/json', endPoint: endPoint]"/>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="LoopReturn">
        <description>
            This service will get loop return payload based on given input parameters.
        </description>
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="accountType" required="true"/>
            <parameter name="returnId"/>
            <parameter name="orderId"/>
            <parameter name="orderName"/>
        </in-parameters>
        <actions>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>
            <if condition="returnId == null &amp;&amp; orderId == null &amp;&amp; orderName == null">
                <return error="true" message="returnId or orderId or orderName is required."/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyLoopSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="LoopWebhook"/>
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <econdition field-name="remoteIdType" operator="equals" from="accountType"/>
                <date-filter/>
            </entity-find>

            <entity-find-one entity-name="co.hotwax.netsuite.party.Organization" value-field="organization" cache="true">
                <field-map field-name="partyId" from="organizationPartyId"/>
            </entity-find-one>
            <if condition="organization">
                <set field="organizationName" from="organization.organizationName"/>
            </if>

            <set field="systemMessageRemoteId" from="partyLoopSystemMessageRemoteList[0].systemMessageRemoteId" type="String"/>
            <if condition="systemMessageRemoteId == null">
                <return error="true" message="Loop account is not configured for organization ${organizationName} with account type ${accountType}."/>
            </if>

            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType">
                <field-map field-name="systemMessageTypeId" value="return.get"/>
            </entity-find-one>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID return.get"/></if>

            <if condition="returnId">
                <then>
                    <set field="endPoint" value="/warehouse/return/details?return_id=${returnId}"/>
                </then>
                <else-if condition="orderId">
                    <set field="endPoint" value="/warehouse/return/details?order_id=${orderId}"/>
                </else-if>
                <else-if condition="orderName">
                    <set field="endPoint" value="/warehouse/return/details?order_name=${orderName}"/>
                </else-if>
            </if>

            <service-call name="co.hotwax.loop.common.LoopHelperServices.send#LoopRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId,
                        requestType:'GET', contentType:'application/json', endPoint: endPoint]" out-map="loopReturnResponse"/>

            <if condition="loopReturnResponse.response instanceof Map &amp;&amp; loopReturnResponse.response.errors">
                <return error="true" message="Error getting Loop Return: ${loopReturnResponse.response.errors.message}"/>
            </if>

            <set field="loopReturnPayloadList" from="loopReturnResponse.response"/>
            <script><![CDATA[
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets
                import groovy.json.JsonOutput

                for (loopReturnPayload in loopReturnPayloadList) {
                    loopReturnId = loopReturnPayload.id
                    nowDate = ec.user.nowTimestamp

                    jsonFilePathRef = ec.resource.expand(systemMessageType.receivePath, null,
                    [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'runtime://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
                    dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'), partyId:organizationPartyId, accountType:accountType, loopReturnId:loopReturnId, organizationName:organizationName], false)

                    jsonFilePath = ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()

                    // Create directories if they do not exist
                    def file = new File(jsonFilePath)
                    if (!file.parentFile.exists()) file.parentFile.mkdirs()

                    jsonString = JsonOutput.prettyPrint(JsonOutput.toJson(loopReturnPayload))
                    Files.write(Paths.get(jsonFilePath), jsonString.getBytes("UTF-8"))
                    logger.info("File successfully written to: ${jsonFilePath}")
                }
            ]]></script>
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                          in-map="[systemMessageTypeId:systemMessageType.systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                    messageText:jsonFilePathRef, senderId: organizationPartyId, docType: accountType, sendNow:false, returnId: loopReturnId]" out-map="resultMap"/>
            <return message="Get Loop Return process has been executed successfully."/>
        </actions>
    </service>
</services>