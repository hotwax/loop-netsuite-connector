<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="UserProfileList">
        <out-parameters>
            <parameter name="organizationDetailList" type="List"/>
        </out-parameters>
        <actions>
            <set field="userId" from="ec.user.UserAccount.userId"/>

            <entity-find entity-name="co.hotwax.netsuite.party.PartyRelationship" list="partyRelationshipList" distinct="true">
                <econdition field-name="fromRoleTypeId" operator="equals" value="Organization"/>
                <econdition field-name="toRoleTypeId" operator="equals" value="Contact"/>
                <econdition field-name="relationshipTypeEnumId" operator="equals" value="PrtContact"/>
            </entity-find>

            <set field="organizationDetailList" from="[]"/>
            <iterate list="partyRelationshipList" entry="partyRelationship">
                <set field="organizationPartyId" from="partyRelationship.fromPartyId" type="String"/>
                <set field="personPartyId" from="partyRelationship.toPartyId" type="String"/>

                <entity-find-one entity-name="co.hotwax.netsuite.party.Organization" value-field="organization">
                    <field-map field-name="partyId" from="organizationPartyId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="partyId" from="personPartyId"/>
                </entity-find-one>
                <script>
                    organizationDetailList.add([organizationPartyId:organizationPartyId, personPartyId:personPartyId,
                    organizationName:organization.organizationName, userFullName:userAccount.userFullName, emailAddress:userAccount.emailAddress, userId:userAccount.userId, username:userAccount.username])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="OrganizationPartyIds">
        <description>
            Returns the organization party ids for associated with UserAccount party
        </description>
        <out-parameters>
            <parameter name="partyId" type="set"/>
        </out-parameters>
        <actions>
            <set field="contactPersonPartyId" from="ec.user.UserAccount.partyId"/>
            <script>
                partyRelationshipList = ec.entity.find("co.hotwax.netsuite.party.PartyRelationship").condition([toPartyId: contactPersonPartyId, fromRoleTypeId: "Organization", toRoleTypeId: "Contact", relationshipTypeEnumId: "PrtContact"]).disableAuthz().list()
            </script>
            <if condition="partyRelationshipList">
                <set field="partyId" from="partyRelationshipList[0].fromPartyId"/>
            </if>
            <if condition="partyId == null"><return error="true" message="Organization not found for Logged in user ${loggedInPartyId}"/></if>
        </actions>
    </service>

    <service verb="get" noun="NetsuiteDetails">
        <out-parameters>
            <parameter name="netsuiteRemoteList" type="List"/>
        </out-parameters>
        <actions>
            <!-- Get Netsuite connections -->
            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <date-filter/>
            </entity-find>

            <set field="netsuiteRemoteList" from="[]"/>
            <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="netsuiteRemote">
                    <field-map field-name="systemMessageRemoteId" from="partyNetSystemMessageRemote.systemMessageRemoteId"/>
                </entity-find-one>
                <script>
                    netsuiteRemoteList.add([systemMessageRemoteId:netsuiteRemote.systemMessageRemoteId, accountType:netsuiteRemote.remoteIdType,
                    remoteId:netsuiteRemote.remoteId, certificateId:netsuiteRemote.sendSharedSecret, consumerKey:netsuiteRemote.sharedSecret, privateKey:netsuiteRemote.privateKey, verified:partyNetSystemMessageRemote.verified])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="LoopDetails">
        <out-parameters>
            <parameter name="loopRemoteList" type="List"/>
        </out-parameters>
        <actions>
            <!-- Get Netsuite connections -->
            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyLoopSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="LoopWebhook"/>
                <date-filter/>
            </entity-find>

            <set field="loopRemoteList" from="[]"/>

            <iterate list="partyLoopSystemMessageRemoteList" entry="partyLoopSystemMessageRemote">
                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="loopRemote">
                    <field-map field-name="systemMessageRemoteId" from="partyLoopSystemMessageRemote.systemMessageRemoteId"/>
                </entity-find-one>
                <script>
                    loopRemoteList.add([systemMessageRemoteId:loopRemote.systemMessageRemoteId, accountType:loopRemote.remoteIdType,
                    webhookSecret:loopRemote.sendSharedSecret, privateKey:loopRemote.privateKey, verified:partyLoopSystemMessageRemote.verified])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="UserLoginAPIKey">
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="systemMessageRemoteId" required="true"/>
        </in-parameters>
        <actions>
            <set field="fromDate" from="ec.user.nowTimestamp"/>

            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessageRemoteId"/>
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <date-filter/>
            </entity-find>

            <if condition="partyNetSystemMessageRemoteList == null">
                <return error="true" message="NetSuite Account not found for organization : ${organizationPartyId}"/>
            </if>

            <entity-find entity-name="moqui.security.UserAccount" list="userAccountList">
                <econdition field-name="externalUserId" operator="equals" from="systemMessageRemoteId"/>
            </entity-find>

            <if condition="userAccountList">
                <set field="userAccount" from="userAccountList[0]"/>
            </if>

            <if condition="userAccount">
                <return error="true" message="Integration user already exists for NetSuite Account : ${systemMessageRemoteId}"/>
            </if>

            <!-- Create Integration UserLogin Account for registered user to call API from netsuite  -->

            <!-- Create Integration Party -->
            <set field="password" from="org.moqui.util.StringUtilities.getRandomString(20) + 'Hc@7'"/>

            <service-call name="create#co.hotwax.netsuite.party.Party"
                          in-map="[partyTypeEnumId:'PtyPerson', disabled:'N', ownerPartyId:organizationPartyId]"
                          out-map="integrationPartyOut"/>
            <set field="integrationPartyId" from="integrationPartyOut.partyId"/>

            <service-call name="create#co.hotwax.netsuite.party.PartyRole"
                          in-map="[partyId:integrationPartyId, roleTypeId:'ContactIntegration']"/>

            <!-- Create Integration User Account -->
            <service-call name="org.moqui.impl.UserServices.create#UserAccount"
                          in-map="[username:systemMessageRemoteId + '_Integration', newPassword:password, newPasswordVerify:password, partyId:integrationPartyId, externalUserId:systemMessageRemoteId]"
                          out-map="userOut"/>
            <set field="integrationUserId" from="userOut.userId"/>

            <service-call name="create#moqui.security.UserGroupMember" in-map="[userId:integrationUserId, userGroupId:'NETSUITE_INTEGRATION']"/>

            <!-- Link integration user as a contact integration for the Organization -->
            <service-call name="create#co.hotwax.netsuite.party.PartyRelationship"
                          in-map="[fromPartyId:organizationPartyId, fromRoleTypeId:'Organization', toPartyId:integrationPartyId, toRoleTypeId:'ContactIntegration', relationshipTypeEnumId:'PrtContact', fromDate:fromDate]"/>

            <entity-find entity-name="moqui.security.UserLoginKey" list="userLoginKeyList">
                <econdition field-name="userId" operator="equals" from="integrationUserId"/>
                <date-filter/>
            </entity-find>

            <if condition="userLoginKeyList">
                <set field="userLoginKey" from="userLoginKeyList[0]"/>
            </if>

            <if condition="userLoginKey">
                <return error="true" message="User login api key already exists for NetSuite Account : ${systemMessageRemoteId}"/>
            </if>
            <script><![CDATA[
                import org.moqui.util.StringUtilities
                import org.moqui.entity.EntityCondition

                // generate login key
                String loginKey = StringUtilities.getRandomString(40)

                // save hashed in UserLoginKey, calc expire and set from/thru dates
                String hashedKey = ec.ecfi.getSimpleHash(loginKey, "", ec.ecfi.getLoginKeyHashType(), false)
                Timestamp fromDate = ec.user.nowTimestamp

                ec.service.sync().name("create", "moqui.security.UserLoginKey")
                .parameters([loginKey:hashedKey, userId:integrationUserId, fromDate:fromDate])
                .disableAuthz().requireNewTransaction(false).call()

                // clean out expired keys
                ec.entity.find("moqui.security.UserLoginKey").condition("userId", integrationUserId)
                    .condition("thruDate", EntityCondition.LESS_THAN, fromDate).disableAuthz().deleteAll()
            ]]></script>
            <!-- Final Success Message -->
            <return type="success" message="User Login Key has been created successfully."/>
        </actions>
    </service>

    <service verb="get" noun="UserLoginAPIKey">
        <in-parameters>
            <parameter name="organizationPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="loginKeyMap" type="Map"/>
        </out-parameters>
        <actions>
            <set field="loginKeyMap" from="[:]"/>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <date-filter/>
            </entity-find>

            <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                <set field="systemMessageRemoteId" from="partyNetSystemMessageRemote.systemMessageRemoteId"/>
                <entity-find entity-name="moqui.security.UserAccount" list="userAccountList">
                    <econdition field-name="externalUserId" operator="equals" from="partyNetSystemMessageRemote.systemMessageRemoteId"/>
                </entity-find>

                <if condition="userAccountList">
                    <set field="userId" from="userAccountList[0].userId"/>
                </if>
                <entity-find entity-name="moqui.security.UserLoginKey" list="userLoginKeyList">
                    <econdition field-name="userId" operator="equals" from="userId"/>
                    <date-filter/>
                </entity-find>

                <if condition="userLoginKeyList">
                    <set field="userLoginKey" from="userLoginKeyList[0].loginKey"/>
                </if>
                <script>
                    if (userLoginKey) {
                        loginKeyMap.put(systemMessageRemoteId, userLoginKey)
                    }
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="IntegrationTypeMappingDetails">
        <in-parameters>
            <parameter name="organizationPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="integrationTypeMappingList" type="List"/>
        </out-parameters>
        <actions>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <!-- Get Party Integration Type Mappings -->
            <entity-find entity-name="co.hotwax.netsuite.party.PartyIntegrationTypeMapping" list="partyIntegrationTypeMappingList">
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <date-filter/>
            </entity-find>

            <set field="integrationTypeMappingList" from="[]"/>
            <iterate list="partyIntegrationTypeMappingList" entry="partyIntegrationTypeMapping">
                <entity-find-one entity-name="co.hotwax.netsuite.IntegrationTypeMapping" value-field="integrationTypeMapping">
                    <field-map field-name="integrationMappingId" from="partyIntegrationTypeMapping.integrationMappingId"/>
                    <field-map field-name="integrationTypeId" from="partyIntegrationTypeMapping.integrationTypeId"/>
                </entity-find-one>
                <script>
                    if (integrationTypeMapping != null) {
                        integrationTypeMappingList.add([integrationMappingId:integrationTypeMapping.integrationMappingId, integrationTypeId:integrationTypeMapping.integrationTypeId,
                        mappingKey:integrationTypeMapping.mappingKey, mappingValue:integrationTypeMapping.mappingValue])
                    }
                </script>
            </iterate>
        </actions>
    </service>
</services>