<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="UserProfileList">
        <out-parameters>
            <parameter name="organizationDetailList" type="List"/>
        </out-parameters>
        <actions>
            <set field="userId" from="ec.user.UserAccount.userId"/>

            <entity-find entity-name="co.hotwax.netsuite.party.PartyRelationship" list="partyRelationshipList" distinct="true">
                <econdition field-name="fromRoleTypeId" operator="equals" value="Organization"/>
                <econdition field-name="toRoleTypeId" operator="equals" value="Contact"/>
                <econdition field-name="relationshipTypeEnumId" operator="equals" value="PrtContact"/>
            </entity-find>

            <set field="organizationDetailList" from="[]"/>
            <iterate list="partyRelationshipList" entry="partyRelationship">
                <set field="organizationPartyId" from="partyRelationship.fromPartyId" type="String"/>
                <set field="personPartyId" from="partyRelationship.toPartyId" type="String"/>

                <entity-find-one entity-name="co.hotwax.netsuite.party.Organization" value-field="organization">
                    <field-map field-name="partyId" from="organizationPartyId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="partyId" from="personPartyId"/>
                </entity-find-one>
                <script>
                    organizationDetailList.add([organizationPartyId:organizationPartyId, personPartyId:personPartyId,
                    organizationName:organization.organizationName, userFullName:userAccount.userFullName, emailAddress:userAccount.emailAddress, userId:userAccount.userId, username:userAccount.username])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="OrganizationPartyIds">
        <description>
            Returns the organization party ids for associated with UserAccount party
        </description>
        <out-parameters>
            <parameter name="partyId" type="set"/>
        </out-parameters>
        <actions>
            <set field="contactPersonPartyId" from="ec.user.UserAccount.partyId"/>
            <script>
                partyRelationshipList = ec.entity.find("co.hotwax.netsuite.party.PartyRelationship").condition([toPartyId: contactPersonPartyId, fromRoleTypeId: "Organization", toRoleTypeId: "Contact", relationshipTypeEnumId: "PrtContact"]).disableAuthz().list()
            </script>
            <if condition="partyRelationshipList">
                <set field="partyId" from="partyRelationshipList[0].fromPartyId"/>
            </if>
            <if condition="partyId == null"><return error="true" message="Organization not found for Logged in user ${loggedInPartyId}"/></if>
        </actions>
    </service>

    <service verb="get" noun="NetsuiteDetails">
        <out-parameters>
            <parameter name="netsuiteRemoteList" type="List"/>
        </out-parameters>
        <actions>
            <!-- Get Netsuite connections -->
            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <date-filter/>
            </entity-find>

            <set field="netsuiteRemoteList" from="[]"/>
            <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="netsuiteRemote">
                    <field-map field-name="systemMessageRemoteId" from="partyNetSystemMessageRemote.systemMessageRemoteId"/>
                </entity-find-one>
                <script>
                    netsuiteRemoteList.add([systemMessageRemoteId:netsuiteRemote.systemMessageRemoteId, accountType:netsuiteRemote.remoteIdType,
                    remoteId:netsuiteRemote.remoteId, verified:partyNetSystemMessageRemote.verified])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="LoopDetails">
        <out-parameters>
            <parameter name="loopRemoteList" type="List"/>
        </out-parameters>
        <actions>
            <!-- Get Netsuite connections -->
            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyLoopSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="LoopWebhook"/>
                <date-filter/>
            </entity-find>

            <set field="loopRemoteList" from="[]"/>

            <iterate list="partyLoopSystemMessageRemoteList" entry="partyLoopSystemMessageRemote">
                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="loopRemote">
                    <field-map field-name="systemMessageRemoteId" from="partyLoopSystemMessageRemote.systemMessageRemoteId"/>
                </entity-find-one>
                <script>
                    loopRemoteList.add([systemMessageRemoteId:loopRemote.systemMessageRemoteId, accountType:loopRemote.remoteIdType,
                    verified:partyLoopSystemMessageRemote.verified])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="UserLoginAPIKey">
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="systemMessageRemoteId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="loginKey" type="String"/>
        </out-parameters>
        <actions>
            <set field="fromDate" from="ec.user.nowTimestamp"/>

            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <entity-find-one entity-name="co.hotwax.netsuite.party.Organization" value-field="organization" cache="true">
                <field-map field-name="partyId" from="organizationPartyId"/>
            </entity-find-one>
            <if condition="organization">
                <set field="organizationName" from="organization.organizationName"/>
            </if>

            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote" cache="true">
                <field-map field-name="systemMessageRemoteId" from="systemMessageRemoteId"/>
            </entity-find-one>
            <if condition="systemMessageRemote == null">
                <return error="true" message="NetSuite Account not found for organization : ${organizationName} [${organizationPartyId}]"/>
            </if>

            <entity-find entity-name="moqui.security.UserAccount" list="userAccountList">
                <econdition field-name="externalUserId" operator="equals" from="systemMessageRemoteId"/>
            </entity-find>

            <if condition="userAccountList">
                <set field="userAccount" from="userAccountList[0]"/>
            </if>

            <if condition="!userAccount">
            <!-- Create Integration Party -->
            <set field="password" from="org.moqui.util.StringUtilities.getRandomString(20) + 'Hc@7'"/>

            <service-call name="create#co.hotwax.netsuite.party.Party"
                          in-map="[partyTypeEnumId:'PtyPerson', disabled:'N', ownerPartyId:organizationPartyId]"
                          out-map="integrationPartyOut"/>
            <set field="integrationPartyId" from="integrationPartyOut.partyId"/>

            <service-call name="create#co.hotwax.netsuite.party.PartyRole"
                          in-map="[partyId:integrationPartyId, roleTypeId:'ContactIntegration']"/>

            <!-- Create Integration User Account -->
            <service-call name="org.moqui.impl.UserServices.create#UserAccount"
                          in-map="[username:systemMessageRemoteId + '_Integration', newPassword:password, newPasswordVerify:password, partyId:integrationPartyId, externalUserId:systemMessageRemoteId]"
                          out-map="userOut"/>
            <set field="integrationUserId" from="userOut.userId"/>

            <service-call name="create#moqui.security.UserGroupMember" in-map="[userId:integrationUserId, userGroupId:'NETSUITE_INTEGRATION']"/>

            <!-- Link integration user as a contact integration for the Organization -->
            <service-call name="create#co.hotwax.netsuite.party.PartyRelationship"
                          in-map="[fromPartyId:organizationPartyId, fromRoleTypeId:'Organization', toPartyId:integrationPartyId, toRoleTypeId:'ContactIntegration', relationshipTypeEnumId:'PrtContact', fromDate:fromDate]"/>
            <else>
                <set field="integrationUserId" from="userAccount.userId"/>
                <entity-find entity-name="moqui.security.UserLoginKey" list="userLoginKeyList">
                    <econdition field-name="userId" operator="equals" from="integrationUserId"/>
                    <econdition field-name="loginKey" operator="is-not-null"/>
                    <date-filter/>
                </entity-find>
                <if condition="userLoginKeyList">
                    <iterate list="userLoginKeyList" entry="userLoginKey">
                        <service-call name="update#moqui.security.UserLoginKey"
                                      in-map="[
                            userId:userLoginKey.userId,
                            fromDate:userLoginKey.fromDate,
                            loginKey:userLoginKey.loginKey,
                            thruDate:fromDate
                          ]"/>
                    </iterate>
                </if>
            </else>
            </if>
            <script><![CDATA[
                import org.moqui.util.StringUtilities
                import org.moqui.entity.EntityCondition

                // generate login key
                loginKey = StringUtilities.getRandomString(40)

                // save hashed in UserLoginKey, calc expire and set from/thru dates
                String hashedKey = ec.ecfi.getSimpleHash(loginKey, "", ec.ecfi.getLoginKeyHashType(), false)
                Timestamp fromDate = ec.user.nowTimestamp

                ec.service.sync().name("create", "moqui.security.UserLoginKey")
                .parameters([loginKey:hashedKey, userId:integrationUserId, fromDate:fromDate])
                .disableAuthz().requireNewTransaction(false).call()
            ]]></script>
            <!-- Final Success Message -->
            <return type="success" message="User Login Key has been created successfully."/>
        </actions>
    </service>

    <service verb="get" noun="UserLoginAPIKey">
        <in-parameters>
            <parameter name="organizationPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="loginKeyMap" type="Map"/>
        </out-parameters>
        <actions>
            <set field="loginKeyMap" from="[:]"/>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <date-filter/>
            </entity-find>

            <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                <set field="systemMessageRemoteId" from="partyNetSystemMessageRemote.systemMessageRemoteId"/>
                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote" cache="true">
                    <field-map field-name="systemMessageRemoteId" from="systemMessageRemoteId"/>
                </entity-find-one>

                <entity-find entity-name="moqui.security.UserAccount" list="userAccountList">
                    <econdition field-name="externalUserId" operator="equals" from="systemMessageRemoteId"/>
                </entity-find>

                <if condition="userAccountList">
                    <set field="userId" from="userAccountList[0].userId"/>
                    <entity-find entity-name="moqui.security.UserLoginKey" list="userLoginKeyList">
                        <econdition field-name="userId" operator="equals" from="userId"/>
                        <econdition field-name="loginKey" operator="is-not-null"/>
                        <date-filter/>
                    </entity-find>

                    <if condition="userLoginKeyList">
                        <script>
                            loginKeyMap.put(systemMessageRemoteId, userLoginKeyList[0].loginKey)
                        </script>
                    </if>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="IntegrationTypeMappingDetails">
        <in-parameters>
            <parameter name="organizationPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="integrationTypeMappingMap" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="!organizationPartyId">
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds"
                              out-map="context"/>
                <set field="organizationPartyId" from="context.partyId"/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partySystemMessageRemoteList">
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <date-filter/>
            </entity-find>

            <set field="integrationTypeMappingMap" from="[:]"/>

            <iterate list="partySystemMessageRemoteList" entry="partySystemMessageRemote">
                <set field="systemMessageRemoteId" from="partySystemMessageRemote.systemMessageRemoteId"/>

                <entity-find entity-name="co.hotwax.netsuite.IntegrationTypeMapping"
                             list="intTypeMappingList">
                    <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessageRemoteId"/>
                </entity-find>

                <set field="tmpList" from="[]"/>
                <iterate list="intTypeMappingList" entry="itm">
                    <script>
                        tmpList.add([
                        integrationMappingId: itm.integrationMappingId,
                        integrationTypeId   : itm.integrationTypeId,
                        mappingKey          : itm.mappingKey,
                        mappingValue        : itm.mappingValue,
                        synced              : itm.synced
                        ])
                    </script>
                </iterate>
                <script>
                    if (systemMessageRemoteId) {
                        integrationTypeMappingMap.put(systemMessageRemoteId, tmpList)
                    }
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="login" noun="User" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="username"/>
            <parameter name="password"/>
        </in-parameters>
        <out-parameters>
            <parameter name="api_key"/>
        </out-parameters>
        <actions>
            <if condition="!(username &amp;&amp; password)">
                <return error="true" message="Username and/or password missing"/>
            </if>
            <script><![CDATA[
                try {
                    loggedIn = ec.user.loginUser(username, password)
                    if (loggedIn) {
                        api_key = ec.user.getLoginKey()
                        return;
                    } else if (ec.message.hasError()) {
                        ec.logger.error("User login error : " + ec.message.getErrorsString())
                        ec.message.clearErrors()
                    }
                }   catch (Exception e) {
                    ec.logger.warn(e.getMessage())
                }
            ]]></script>
            <return error="true" message="Sorry, your username and/or password are incorrect - please try again." />
        </actions>
    </service>

    <service verb="verify" noun="LoopWebhookSubscriptions">
        <in-parameters>
            <parameter name="organizationPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="webhookSubscriptionMap" type="Map"/>
        </out-parameters>
        <actions>
            <set field="webhookSubscriptionMap" from="[:]"/>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <date-filter/>
            </entity-find>

            <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                <set field="isWebhookSubscriptionEligible" value="Y"/>

                <set field="systemMessageRemoteId" from="partyNetSystemMessageRemote.systemMessageRemoteId"/>
                <set field="remoteIdType" from="partyNetSystemMessageRemote.remoteIdType"/>

                <set field="verified" from="partyNetSystemMessageRemote.verified"/>
                <if condition="verified == 'N'">
                    <set field="isWebhookSubscriptionEligible" value="N"/>
                </if>

                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote" cache="true">
                    <field-map field-name="systemMessageRemoteId" from="systemMessageRemoteId"/>
                </entity-find-one>

                <set field="remoteId" from="systemMessageRemote.remoteId"/>
                <if condition="remoteId.contains('_')">
                    <set field="remoteId" from="remoteId.replace('_', '-').toLowerCase()"/>
                </if>

                <entity-find entity-name="co.hotwax.netsuite.NetsuiteConfig" list="netsuiteConfigList">
                    <econdition field-name="accountId" operator="equals" from="remoteId"/>
                    <econdition field-name="accountType" operator="equals" from="remoteIdType"/>
                    <econdition field-name="scriptType" operator="in" value="netsuite.restlet.create.refund,netsuite.restlet.create.return,netsuite.restlet.update.trackingnum,netsuite.restlet.create.rma.mapping"/>
                </entity-find>

                <if condition="!netsuiteConfigList">
                    <set field="isWebhookSubscriptionEligible" value="N"/>
                </if>

                <entity-find entity-name="co.hotwax.netsuite.IntegrationTypeMapping" list="intTypeMappingList">
                    <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessageRemoteId"/>
                    <econdition field-name="synced" operator="equals" value="Y"/>
                    <econdition field-name="integrationTypeId" operator="equals" value="NETSUITE_WH_LOCATION"/>
                </entity-find>

                <if condition="!intTypeMappingList">
                    <set field="isWebhookSubscriptionEligible" value="N"/>
                </if>

                <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyLoopSystemMessageRemoteList">
                    <econdition field-name="systemMessageTypeId" operator="equals" value="LoopWebhook"/>
                    <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                    <econdition field-name="remoteIdType" operator="equals" from="remoteIdType"/>
                    <date-filter/>
                </entity-find>
                <if condition="partyLoopSystemMessageRemoteList">
                    <set field="loopSystemMessageRemoteId" from="partyLoopSystemMessageRemoteList[0].systemMessageRemoteId"/>
                </if>

                <script>
                    if (loopSystemMessageRemoteId) {
                        webhookSubscriptionMap.put(loopSystemMessageRemoteId, isWebhookSubscriptionEligible)
                    }
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="IntegrationTypeList">
        <out-parameters>
            <parameter name="enumList" type="List"/>
        </out-parameters>
        <actions>
            <set field="enumList" from="[]"/>
            <entity-find entity-name="moqui.basic.Enumeration" list="enumList">
                <econdition field-name="enumTypeId" operator="equals" value="NETSUITE_RMA_MAPPING"/>
                <econdition field-name="enumId" operator="not-in" from="integrationTypeList"/>
                <order-by field-name="sequenceNum"/>
            </entity-find>
        </actions>
    </service>

    <service verb="change" noun="Password">
       <in-parameters>
           <parameter name="userId" required="true"/>
           <parameter name="oldPassword" required="true"/>
           <parameter name="newPassword" required="true"/>
           <parameter name="newPasswordVerify" required="true"/>
       </in-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.update#Password" in-map="context" out-map="context"/>
            <set field="updateSuccessful" from="context.updateSuccessful" type="Boolean"/>
            <set field="username" from="context.username"/>
            <if condition="!updateSuccessful">
                <return error="true" message="Password incorrect for user ${username}." />
            </if>
        </actions>
    </service>
    <service verb="get" noun="ReturnDetails">
        <in-parameters>
            <parameter name="pageIndex" type="Integer" default-value="0">
                <description>The current page index to get the shipments.</description>
            </parameter>
            <parameter name="pageSize" type="Integer" default-value="20">
                <description>The maximum number of shipments to display.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="returnList" type="List"/>
        </out-parameters>
        <actions>
            <set field="returnList" from="[]"/>

            <!-- Get OrganizationPartyId from logged in user -->
            <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
            <set field="organizationPartyId" from="context.partyId" type="String"/>
            <script>
                offset = pageIndex.multiply(pageSize)
                returnFind = ec.entity.find("co.hotwax.netsuite.LoopReturnHistory").condition("partyId", organizationPartyId).orderBy("-createdDate").offset(offset).limit(pageSize)

                try (returnItr = returnFind.iterator()) {
            </script>
            <iterate list="returnItr" entry="returnDetail">
                <entity-find-one entity-name="moqui.basic.StatusItem" value-field="statusItem" cache="true">
                    <field-map field-name="statusId" from="returnDetail.statusId"/>
                </entity-find-one>
                <script>
                    returnList.add([
                    loopReturnId        : returnDetail.loopReturnId,
                    shopifyOrderId      : returnDetail.shopifyOrderId,
                    shopifyOrderName    : returnDetail.shopifyOrderName,
                    netsuiteReturnId    : returnDetail.netsuiteReturnId,
                    status              : statusItem.description
                    ])
                </script>
            </iterate>
            <script>}</script>
        </actions>
    </service>
</services>