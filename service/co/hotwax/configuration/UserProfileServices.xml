<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="UserProfileList">
        <out-parameters>
            <parameter name="organizationDetailList" type="List"/>
        </out-parameters>
        <actions>
            <set field="userId" from="ec.user.UserAccount.userId"/>

            <entity-find entity-name="co.hotwax.netsuite.party.PartyRelationship" list="partyRelationshipList" distinct="true">
                <econdition field-name="fromRoleTypeId" operator="equals" value="Organization"/>
                <econdition field-name="toRoleTypeId" operator="equals" value="Contact"/>
                <econdition field-name="relationshipTypeEnumId" operator="equals" value="PrtContact"/>
            </entity-find>

            <set field="organizationDetailList" from="[]"/>
            <iterate list="partyRelationshipList" entry="partyRelationship">
                <set field="organizationPartyId" from="partyRelationship.fromPartyId" type="String"/>
                <set field="personPartyId" from="partyRelationship.toPartyId" type="String"/>

                <entity-find-one entity-name="co.hotwax.netsuite.party.Organization" value-field="organization">
                    <field-map field-name="partyId" from="organizationPartyId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="partyId" from="personPartyId"/>
                </entity-find-one>
                <script>
                    organizationDetailList.add([organizationPartyId:organizationPartyId, personPartyId:personPartyId,
                    organizationName:organization.organizationName, userFullName:userAccount.userFullName, emailAddress:userAccount.emailAddress, userId:userAccount.userId, username:userAccount.username])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="OrganizationPartyIds">
        <description>
            Returns the organization party ids for associated with UserAccount party
        </description>
        <in-parameters>
            <parameter name="personPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId" type="set"/>
        </out-parameters>
        <actions>
            <if condition="personPartyId"><then>
                <set field="loggedInPartyId" from="personPartyId" type="String"/>
                </then><else>
                    <set field="loggedInPartyId" from="ec.user.userAccount.partyId"/>
                </else>
            </if>

            <if condition="loggedInPartyId == null"><return error="true" message="Logged in user has no party ${loggedInPartyId}"/></if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartyRelationship" list="partyRelationshipList" distinct="true">
                <econdition field-name="toPartyId" operator="equals" from="loggedInPartyId"/>
                <econdition field-name="fromRoleTypeId" operator="equals" value="Organization"/>
                <econdition field-name="toRoleTypeId" operator="equals" value="Contact"/>
                <econdition field-name="relationshipTypeEnumId" operator="equals" value="PrtContact"/>
            </entity-find>

            <if condition="partyRelationshipList">
                <set field="partyId" from="partyRelationshipList[0].fromPartyId" type="String"/>
            </if>
            <if condition="partyId == null"><return error="true" message="Organization not found for Logged in user ${loggedInPartyId}"/></if>
        </actions>
    </service>

    <service verb="get" noun="NetsuiteDetails">
        <in-parameters>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="netsuiteRemoteList" type="List"/>
        </out-parameters>
        <actions>
            <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds"
                          in-map="[personPartyId:partyId]" out-map="context"/>
            <set field="organizationPartyId" from="context.partyId" type="String"/>

            <!-- Get Netsuite connections -->
            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <date-filter/>
            </entity-find>

            <set field="netsuiteRemoteList" from="[]"/>
            <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="netsuiteRemote">
                    <field-map field-name="systemMessageRemoteId" from="partyNetSystemMessageRemote.systemMessageRemoteId"/>
                </entity-find-one>
                <script>
                    netsuiteRemoteList.add([systemMessageRemoteId:netsuiteRemote.systemMessageRemoteId, accountType:netsuiteRemote.remoteIdType,
                    remoteId:netsuiteRemote.remoteId, certificateId:netsuiteRemote.sendSharedSecret, consumerKey:netsuiteRemote.sharedSecret, privateKey:netsuiteRemote.privateKey, verified:partyNetSystemMessageRemote.verified])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="LoopDetails">
        <in-parameters>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="loopRemoteList" type="List"/>
        </out-parameters>
        <actions>
            <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds"
                          in-map="[personPartyId:partyId]" out-map="context"/>
            <set field="organizationPartyId" from="context.partyId" type="String"/>

            <!-- Get Netsuite connections -->
            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyLoopSystemMessageRemoteList">
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <econdition field-name="systemMessageTypeId" operator="equals" value="LoopWebhook"/>
                <date-filter/>
            </entity-find>

            <set field="loopRemoteList" from="[]"/>

            <iterate list="partyLoopSystemMessageRemoteList" entry="partyLoopSystemMessageRemote">
                <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="loopRemote">
                    <field-map field-name="systemMessageRemoteId" from="partyLoopSystemMessageRemote.systemMessageRemoteId"/>
                </entity-find-one>
                <script>
                    loopRemoteList.add([systemMessageRemoteId:loopRemote.systemMessageRemoteId, accountType:loopRemote.remoteIdType,
                    webhookSecret:loopRemote.sendSharedSecret, privateKey:loopRemote.privateKey])
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="UserLoginAPIKey">
        <in-parameters>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="loginKey" type="String"/>
        </out-parameters>
        <actions>
            <if condition="partyId">
                <then>
                    <set field="loggedInPartyId" from="partyId" type="String"/>
                </then>
                <else>
                    <set field="loggedInPartyId" from="ec.user.userAccount.partyId"/>
                </else>
            </if>

            <if condition="loggedInPartyId == null"><return error="true" message="Logged in user has no party ${loggedInPartyId}"/></if>

            <entity-find-one entity-name="co.hotwax.netsuite.party.Party" value-field="party">
                <field-map field-name="ownerPartyId" from="loggedInPartyId"/>
                <field-map field-name="partyTypeEnumId" value="PtyPerson"/>
            </entity-find-one>
            <set field="partyId" from="party.partyId"/>

            <if condition="partyId == null"><return error="true" message="Integration party not found for Logged in user ${loggedInPartyId}"/></if>

            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="partyId" from="partyId"/>
            </entity-find-one>

            <set field="userId" from="userAccount.userId" type="String"/>
            <if condition="userId == null"><return error="true" message="Integration user not found for Logged in user ${loggedInPartyId}"/></if>

            <entity-find-one entity-name="moqui.security.UserLoginKey" value-field="userLoginKey">
                <econdition field-name="userId" operator="equals" from="userId"/>
                <date-filter/>
            </entity-find-one>
            <if condition="userLoginKey">
                <return error="true" message="User login api key already exists for user ${loggedInPartyId}"/>
            </if>
            <script><![CDATA[
                import org.moqui.util.StringUtilities
                import org.moqui.entity.EntityCondition

                // generate login key
                String loginKey = StringUtilities.getRandomString(40)

                // expire in 5 years
                expireHours = Float.valueOf(43800)

                // save hashed in UserLoginKey, calc expire and set from/thru dates
                String hashedKey = ec.ecfi.getSimpleHash(loginKey, "", ec.ecfi.getLoginKeyHashType(), false)
                Timestamp fromDate = ec.user.nowTimestamp
                long thruTime = fromDate.getTime() + Math.round(expireHours * 60*60*1000)

                ec.service.sync().name("create", "moqui.security.UserLoginKey")
                .parameters([loginKey:hashedKey, userId:userId, fromDate:fromDate, thruDate:new Timestamp(thruTime)])
                .disableAuthz().requireNewTransaction(false).call()

                // clean out expired keys
                ec.entity.find("moqui.security.UserLoginKey").condition("userId", userId)
                    .condition("thruDate", EntityCondition.LESS_THAN, fromDate).disableAuthz().deleteAll()
            ]]></script>
        </actions>
    </service>
    <service verb="get" noun="UserLoginAPIKey">
        <in-parameters>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="loginKey" type="String"/>
        </out-parameters>
        <actions>
            <if condition="partyId">
                <then>
                    <set field="loggedInPartyId" from="partyId" type="String"/>
                </then>
                <else>
                    <set field="loggedInPartyId" from="ec.user.userAccount.partyId"/>
                </else>
            </if>

            <if condition="loggedInPartyId == null"><return error="true" message="Logged in user has no party ${loggedInPartyId}"/></if>

            <entity-find-one entity-name="co.hotwax.netsuite.party.Party" value-field="party">
                <field-map field-name="ownerPartyId" from="loggedInPartyId"/>
                <field-map field-name="partyTypeEnumId" value="PtyPerson"/>
            </entity-find-one>
            <set field="partyId" from="party.partyId"/>

            <if condition="partyId == null"><return error="true" message="Integration party not found for Logged in user ${loggedInPartyId}"/></if>

            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="partyId" from="partyId"/>
            </entity-find-one>

            <set field="userId" from="userAccount.userId" type="String"/>
            <if condition="userId == null"><return error="true" message="Integration user not found for Logged in user ${loggedInPartyId}"/></if>

            <entity-find-one entity-name="moqui.security.UserLoginKey" value-field="userLoginKey">
                <econdition field-name="userId" operator="equals" from="userId"/>
                <date-filter/>
            </entity-find-one>
            <if condition="userLoginKey">
                <set field="loginKey" from="userLoginKey.loginKey" type="String"/>
            </if>
        </actions>
    </service>
</services>