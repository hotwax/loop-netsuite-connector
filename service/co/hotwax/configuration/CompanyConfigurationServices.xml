<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="create" noun="OrganizationParty">
        <description>Creates an Organization party and its associated role.</description>
        <in-parameters>
            <parameter name="organizationName" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="organizationPartyId"/>
        </out-parameters>
        <actions>
            <service-call name="create#co.hotwax.netsuite.party.Party"
                          in-map="[partyTypeEnumId:'PtyOrganization', disabled:'N']"
                          out-map="orgPartyOut"/>
            <set field="organizationPartyId" from="orgPartyOut.partyId"/>

            <service-call name="create#co.hotwax.netsuite.party.Organization"
                          in-map="[partyId:organizationPartyId, organizationName:organizationName]"/>

            <service-call name="create#co.hotwax.netsuite.party.PartyRole"
                          in-map="[partyId:organizationPartyId, roleTypeId:'Organization']"/>
        </actions>
    </service>

    <service verb="create" noun="ContactPerson">
        <description>Creates a Contact Person and associates with an existing Organization party.</description>
        <in-parameters>
            <parameter name="userFullName" required="true"/>
            <parameter name="emailAddress" required="true"/>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="contactNumber" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
        </in-parameters>
        <out-parameters>
            <parameter name="personPartyId"/>
            <parameter name="emailContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="userId"/>
        </out-parameters>
        <actions>
            <set field="fromDate" from="ec.user.nowTimestamp"/>

            <!-- Create Person Party -->
            <service-call name="create#co.hotwax.netsuite.party.Party"
                          in-map="[partyTypeEnumId:'PtyPerson', disabled:'N', ownerPartyId:organizationPartyId]"
                          out-map="personPartyOut"/>
            <set field="personPartyId" from="personPartyOut.partyId"/>

            <set field="firstName" from="userFullName"/>
            <set field="lastName" from="null"/>
            <if condition="firstName?.contains(' ')">
                <set field="lastName" from="firstName.substring(firstName.lastIndexOf(' ')+1)"/>
                <set field="firstName" from="firstName.substring(0, firstName.lastIndexOf(' '))"/>
            </if>

            <service-call name="create#co.hotwax.netsuite.party.Person"
                          in-map="[partyId:personPartyId, firstName:firstName, lastName:lastName]"/>

            <service-call name="create#co.hotwax.netsuite.party.PartyRole"
                          in-map="[partyId:personPartyId, roleTypeId:'Contact']"/>

            <!-- Create Email Contact Mechanism -->
            <service-call name="create#co.hotwax.netsuite.party.contact.ContactMech"
                          in-map="[contactMechTypeEnumId:'CmtEmailAddress', infoString:emailAddress]"
                          out-map="emailOut"/>
            <set field="emailContactMechId" from="emailOut.contactMechId"/>

            <service-call name="create#co.hotwax.netsuite.party.contact.PartyContactMech"
                          in-map="[partyId:personPartyId, contactMechId:emailContactMechId, contactMechPurposeId:'EmailPrimary']"/>

            <!-- Create User Account -->
            <service-call name="org.moqui.impl.UserServices.create#UserAccount"
                          in-map="[username:username, userFullName:userFullName, newPassword:newPassword, newPasswordVerify:newPasswordVerify, emailAddress:emailAddress, requirePasswordChange:requirePasswordChange, partyId:personPartyId]"
                          out-map="userOut"/>
            <set field="userId" from="userOut.userId"/>

            <!-- Assign UserGroup to view scereen and call organization API's -->
            <service-call name="create#moqui.security.UserGroupMember" in-map="[userId:userId, userGroupId:'ALL_TENANT_AUTH']"/>

            <!-- Create Telecom Contact Mechanism -->
            <service-call name="create#co.hotwax.netsuite.party.contact.ContactMech"
                          in-map="[contactMechTypeEnumId:'CmtTelecomNumber']"
                          out-map="telecomOut"/>
            <set field="telecomContactMechId" from="telecomOut.contactMechId"/>

            <service-call name="create#co.hotwax.netsuite.party.contact.PartyContactMech"
                          in-map="[partyId:personPartyId, contactMechId:telecomContactMechId, contactMechPurposeId:'PhonePrimary']"/>

            <service-call name="create#co.hotwax.netsuite.party.contact.TelecomNumber"
                          in-map="[contactMechId:telecomContactMechId, contactNumber:contactNumber]"/>

            <!-- Link Person as a contact for the Organization -->
            <service-call name="create#co.hotwax.netsuite.party.PartyRelationship"
                          in-map="[fromPartyId:organizationPartyId, fromRoleTypeId:'Organization', toPartyId:personPartyId, toRoleTypeId:'Contact', relationshipTypeEnumId:'PrtContact', fromDate:fromDate]"/>
        </actions>
    </service>

    <service verb="register" noun="Organization" authenticate="anonymous-all">
        <description>
            Creates a Person party with userFullName and email,
            creates an Organization with organizationName,
            links them, and creates a UserAccount.
        </description>
        <in-parameters>
            <parameter name="userFullName" required="true"/>
            <parameter name="emailAddress" required="true"/>
            <parameter name="organizationName" required="true"/>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="contactNumber" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
        </in-parameters>
        <out-parameters>
            <parameter name="personPartyId"/>
            <parameter name="organizationPartyId"/>
            <parameter name="emailContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="userId"/>
        </out-parameters>
        <actions>
            <!-- Create Organization Party -->
            <service-call name="co.hotwax.configuration.CompanyConfigurationServices.create#OrganizationParty"
                          in-map="[organizationName: organizationName]"
                          out-map="orgPartyOut"/>
            <set field="organizationPartyId" from="orgPartyOut.organizationPartyId"/>

            <!-- Create ContactPerson Party and associate with Organization -->
            <service-call name="co.hotwax.configuration.CompanyConfigurationServices.create#ContactPerson"
                          in-map="[userFullName:userFullName,
                             emailAddress:emailAddress,
                             username:username,
                             newPassword:newPassword,
                             newPasswordVerify:newPasswordVerify,
                             contactNumber:contactNumber,
                             requirePasswordChange:requirePasswordChange,
                             organizationPartyId:organizationPartyId]"
                          />
            <return type="success" message="Your account has been successfully registered with ${organizationName}. Your Organization ID is ${organizationPartyId}."/>
        </actions>
    </service>

    <service verb="create" noun="LoopSystemMessageRemote" authenticate="true">
        <description>
            Creates a new SystemMessage entry and associates it with the currently logged-in user.
        </description>
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="privateKey" required="true"/>
            <parameter name="sendSharedSecret" required="true"/>
            <parameter name="accountType" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="systemMessageRemoteId"/>
        </out-parameters>
        <actions>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <!-- Create SystemMessageRemote entry -->
            <set field="systemMessageTypeId" from="'LoopWebhook'"/>
            <set field="sendUrl" value="https://api.loopreturns.com/api/v1"/>
            <service-call name="create#SystemMessageRemote"
                          in-map="[
                             sendUrl:sendUrl,
                             privateKey:privateKey,
                             sendSharedSecret:sendSharedSecret,
                             remoteIdType:accountType,
                             systemMessageTypeId:systemMessageTypeId]"
                          out-map="systemMessageOut"/>
            <set field="systemMessageRemoteId" from="systemMessageOut.systemMessageRemoteId"/>
            <if condition="systemMessageRemoteId == null">
                <return error="true" message="Failed to create SystemMessageRemote. No valid ID returned."/>
            </if>

            <!-- Associate SystemMessageRemote with PartySystemMessageRemote -->
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <service-call name="create#PartySystemMessageRemote"
                          in-map="[
                            partyId:organizationPartyId,
                            systemMessageRemoteId:systemMessageRemoteId,
                            remoteIdType:accountType,
                            fromDate:fromDate,
                            systemMessageTypeId:systemMessageTypeId
                          ]"/>
            <return type="success" message="Your loop account has been successfully registered. Your system message remote is ${systemMessageRemoteId}."/>
        </actions>
    </service>

    <service verb="create" noun="NetsuiteSystemMessageRemote">
        <description>
            Creates a new SystemMessageRemote entry to store NetSuite connection details.
        </description>
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="remoteId" required="true"/>
            <parameter name="accountType" required="true"/>
            <parameter name="sshKey" required="true"/>
            <parameter name="sharedSecret" required="true"/>
            <parameter name="sendSharedSecret" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="systemMessageRemoteId"/>
        </out-parameters>
        <actions>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <if condition="remoteId.contains('_')">
                <then>
                    <set field="accountId" from="remoteId.replace('_', '-')"/>
                </then>
                <else>
                    <set field="accountId" from="remoteId"/>
                </else>
            </if>
            <set field="sshKeyValue" value="${sshKey.replaceAll('\\s+', '')}"/>
            <set field="systemMessageTypeId" from="'NetsuiteCredentials'"/>
            <set field="tokenUrl" from="'https://' + accountId + '.suitetalk.api.netsuite.com/services/rest/auth/oauth2/v1/token'"/>
            <set field="sendUrl" from="'https://' + accountId + '.restlets.api.netsuite.com/app/site/hosting/restlet.nl'"/>

            <!-- Create SystemMessage entry -->
            <service-call name="create#SystemMessageRemote"
                          in-map="[
                              remoteId:accountId,
                              sendUrl:sendUrl,
                              remoteIdType:accountType,
                              description:'NetSuite connection credentials',
                              systemMessageTypeId:systemMessageTypeId,
                              receiveUrl:tokenUrl,
                              sharedSecret:sharedSecret,
                              privateKey:sshKeyValue,
                              sendSharedSecret:sendSharedSecret,
                              messageAuthEnumId:'ES256']"
                          out-map="messageOut"/>

            <set field="systemMessageRemoteId" from="messageOut.systemMessageRemoteId"/>
            <if condition="systemMessageRemoteId == null">
                <return error="true" message="Failed to create SystemMessageRemote. No valid ID returned."/>
            </if>

            <!-- Step 2: Associate SystemMessageRemote with PartySystemMessageRemote -->
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <service-call name="create#PartySystemMessageRemote"
                          in-map="[
                            partyId:organizationPartyId,
                            systemMessageRemoteId:systemMessageRemoteId,
                            remoteIdType:accountType,
                            fromDate:fromDate,
                            systemMessageTypeId:systemMessageTypeId
                          ]"/>
            <!-- Final Success Message -->
            <return type="success" message="Your netsuite account has been successfully registered. Your system message remote is ${systemMessageRemoteId}."/>
        </actions>
    </service>

    <service verb="delete" noun="NetsuiteSystemMessageRemote">
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="accountType" required="true"/>
        </in-parameters>
        <actions>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyNetSystemMessageRemoteList">
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessageRemoteId"/>
                <econdition field-name="remoteIdType" operator="equals" from="accountType"/>
                <econdition field-name="systemMessageTypeId" operator="equals" value="NetsuiteCredentials"/>
                <date-filter/>
            </entity-find>

            <set field="thruDate" from="ec.user.nowTimestamp"/>
            <iterate list="partyNetSystemMessageRemoteList" entry="partyNetSystemMessageRemote">
                <service-call name="update#PartySystemMessageRemote"
                              in-map="[
                            partyId:partyNetSystemMessageRemote.partyId,
                            systemMessageRemoteId:partyNetSystemMessageRemote.systemMessageRemoteId,
                            remoteIdType:partyNetSystemMessageRemote.remoteIdType,
                            fromDate:partyNetSystemMessageRemote.fromDate,
                            thruDate:thruDate,
                            systemMessageTypeId:partyNetSystemMessageRemote.systemMessageTypeId
                          ]"/>
            </iterate>
            <!-- Final Success Message -->
            <return type="success" message="Your netsuite account has been successfully deleted."/>
        </actions>
    </service>

    <service verb="delete" noun="LoopSystemMessageRemote">
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="accountType" required="true"/>
        </in-parameters>
        <actions>
            <if condition="!organizationPartyId">
                <!-- Get OrganizationPartyId from logged in user -->
                <service-call name="co.hotwax.configuration.UserProfileServices.get#OrganizationPartyIds" out-map="context"/>
                <set field="organizationPartyId" from="context.partyId" type="String"/>
            </if>

            <entity-find entity-name="co.hotwax.netsuite.party.PartySystemMessageRemote" list="partyLoopSystemMessageRemoteList">
                <econdition field-name="partyId" operator="equals" from="organizationPartyId"/>
                <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessageRemoteId"/>
                <econdition field-name="remoteIdType" operator="equals" from="accountType"/>
                <econdition field-name="systemMessageTypeId" operator="equals" value="LoopWebhook"/>
                <date-filter/>
            </entity-find>

            <set field="thruDate" from="ec.user.nowTimestamp"/>
            <iterate list="partyLoopSystemMessageRemoteList" entry="partyLoopSystemMessageRemote">
                <service-call name="update#PartySystemMessageRemote"
                              in-map="[
                            partyId:partyLoopSystemMessageRemote.partyId,
                            systemMessageRemoteId:partyLoopSystemMessageRemote.systemMessageRemoteId,
                            remoteIdType:partyLoopSystemMessageRemote.remoteIdType,
                            fromDate:partyLoopSystemMessageRemote.fromDate,
                            thruDate:thruDate,
                            systemMessageTypeId:partyLoopSystemMessageRemote.systemMessageTypeId
                          ]"/>
            </iterate>
            <!-- Final Success Message -->
            <return type="success" message="Your loop account has been successfully deleted."/>
        </actions>
    </service>

    <service verb="create" noun="NetSuiteReturnIntegrationMapping">
        <description>
            Creates NetSuite Return Integration Type Mapping Records.
        </description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="enumId"/>
            <parameter name="mappingValue"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumeration">
                <field-map field-name="enumId" from="enumId"/>
            </entity-find-one>

            <service-call name="create#IntegrationTypeMapping"
                          in-map="[
                                integrationTypeId:enumId,
                                systemMessageRemoteId:systemMessageRemoteId,
                                mappingKey:enumeration.enumCode,
                                mappingValue:mappingValue,
                                description:enumeration.description
                              ]"
                          out-map="resultMap"/>

                <set field="integrationMappingId" from="resultMap.integrationMappingId"/>
                <if condition="integrationMappingId == null">
                    <return error="true" message="Failed to create netsuite RMA integration type mapping. No valid ID returned."/>
                </if>

            <!-- Final Success Message -->
            <return type="success" message="Your integration type mapping record has been created successfully."/>
        </actions>
    </service>

    <service verb="delete" noun="NetSuiteReturnIntegrationMapping">
        <in-parameters>
            <parameter name="integrationMappingId" required="true"/>
            <parameter name="integrationTypeId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="delete#co.hotwax.netsuite.IntegrationTypeMapping"
                          in-map="[
                            integrationMappingId:integrationMappingId,
                            integrationTypeId:integrationTypeId
                          ]"/>
            <!-- Final Success Message -->
            <return type="success" message="Your integration type mapping record has been successfully deleted."/>
        </actions>
    </service>
</services>